/*!
@file
@brief Contains the grammar definition for the parser.
*/

%skeleton "lalr1.cc"
%defines
%define parser_class_name {parser}
%define api.token.constructor
%define api.value.type variant
%define parse.assert
%file-prefix "VCDParser"
%name-prefix "VCDParser"

%code requires 
{
    #include <string>
    #include <map>

    #include "VCDTypes.hpp"
    #include "VCDFile.hpp"

    class VCDFileParser;
}

%param {VCDFileParser & driver}

%locations
%initial-action {
    @$.begin.filename = @$.end.filename = &driver.filepath;
}

%define parse.trace
%define parse.error verbose

%code{

#include "VCDFileParser.hpp"

//! Current time while parsing the VCD file.
VCDTime current_time = 0;

}

%token <std::string>    TOK_REFERENCE                     
%token                  TOK_KW_END            
%token                  TOK_KW_COMMENT        
%token <std::string>    TOK_TEXT
%token                  TOK_KW_DATE           
%token                  TOK_KW_ENDDEFINITIONS 
%token                  TOK_KW_SCOPE          
%token                  TOK_KW_TIMESCALE      
%token                  TOK_KW_UPSCOPE        
%token                  TOK_KW_VAR            
%token                  TOK_KW_VERSION        
%token                  TOK_KW_DUMPALL        
%token                  TOK_KW_DUMPOFF        
%token                  TOK_KW_DUMPON         
%token                  TOK_KW_DUMPVARS       
%token <VCDScopeType>   TOK_KW_SCOPE_TYPE          
%token <VCDTimeRes>     TOK_TIME_NUMBER       
%token <VCDTimeUnit>    TOK_TIME_UNIT         
%token <VCDVarType>     TOK_VAR_TYPE                    
%token <VCDBit>         TOK_VALUE             
%token <std::string>    TOK_BIN_NUM           
%token                  TOK_BINARY_NUMBER     
%token <float>          TOK_REAL_NUM             
%token <std::string>    TOK_IDENTIFIER        
%token <int>            TOK_DECIMAL_NUM
%token <int>            TOK_SIMULATION_TIME    
%token                  TOK_UNUDENTIFIED_SYMBOL   
%token                  END  0 "end of file"

%start input

%%

input :
    %empty
|   declaration_commands simulation_commands
|   simulation_commands
|   declaration_commands 
;

declaration_commands :
    declaration_command
|   declaration_commands declaration_command
;

simulation_commands:
    simulation_command
|   simulation_commands simulation_command 
;

declaration_command :
    TOK_KW_COMMENT  TOK_TEXT     TOK_KW_END
|   TOK_KW_DATE     TOK_TEXT     TOK_KW_END {
    driver.fh -> date = $2;
}
|   TOK_KW_ENDDEFINITIONS TOK_KW_END
|   TOK_KW_SCOPE    TOK_KW_SCOPE_TYPE TOK_IDENTIFIER TOK_KW_END {
    // PUSH the current scope stack.
    
    VCDScope * new_scope = new VCDScope();
    new_scope -> name = $3;
    new_scope -> type = $2;
    new_scope -> parent = driver.scopes.top();
    
    driver.fh -> add_scope(
        new_scope
    );
    
    driver.scopes.top() -> children.push_back(new_scope);
    driver.scopes.push(new_scope);

}
|   TOK_KW_TIMESCALE TOK_TIME_NUMBER TOK_TIME_UNIT TOK_KW_END {
    driver.fh -> time_resolution = $2;
    driver.fh -> time_units      = $3;
}
|   TOK_KW_UPSCOPE  TOK_KW_END {
    // POP the current scope stack.

    driver.scopes.pop();

}
|   TOK_KW_VAR      TOK_VAR_TYPE TOK_DECIMAL_NUM TOK_IDENTIFIER TOK_REFERENCE 
    TOK_KW_END {
    // Add this variable to the current scope.

    VCDSignal * new_signal  = new VCDSignal();
    new_signal -> type      = $2;
    new_signal -> size      = $3;
    new_signal -> hash      = $4;
    new_signal -> reference = $5;

    VCDScope * scope = driver.scopes.top();
    scope -> signals.push_back(new_signal);

    driver.fh -> add_signal(new_signal);

}
|   TOK_KW_VERSION  TOK_TEXT TOK_KW_END {
    driver.fh -> version = $2;
}
;

simulation_command :
    TOK_KW_DUMPALL  value_changes TOK_KW_END
|   TOK_KW_DUMPOFF  value_changes TOK_KW_END
|   TOK_KW_DUMPON   value_changes TOK_KW_END
|   TOK_KW_DUMPVARS value_changes TOK_KW_END
|   TOK_KW_COMMENT  value_changes TOK_KW_END
|   simulation_time
|   value_change
;

simulation_time : TOK_SIMULATION_TIME {
    current_time =  $1;
    driver.fh    -> add_timestamp($1);
}

value_changes :
    value_change
|   value_changes value_change

value_change:
    scalar_value_change
|   vector_value_change

scalar_value_change:  TOK_VALUE TOK_IDENTIFIER {

    VCDSignalHash   hash  = $2;
    VCDTimedValue * toadd = new VCDTimedValue();
    
    toadd -> time   = current_time;
    toadd -> value  = new VCDValue($1);

    driver.fh -> add_signal_value(toadd, hash);

}


vector_value_change: 
    TOK_BIN_NUM     TOK_IDENTIFIER {

    VCDSignalHash   hash  = $2;
    VCDTimedValue * toadd = new VCDTimedValue();
    
    toadd -> time   = current_time;

    VCDBitVector * vec = new VCDBitVector();
    VCDValue * val = new VCDValue(vec);

    for(int i =1; i < $1.size(); i ++) {
        switch($1[i]) {
            case '0':
                vec -> push_back(VCD_0);
                break;
            case '1':
                vec -> push_back(VCD_1);
                break;
            case 'x':
            case 'X':
                vec -> push_back(VCD_X);
                break;
            case 'z':
            case 'Z':
                vec -> push_back(VCD_Z);
                break;
            default:
                vec -> push_back(VCD_X);
                break;
        }
    }

    toadd -> value = val;

    driver.fh -> add_signal_value(toadd, hash);

}
|   TOK_REAL_NUM    TOK_IDENTIFIER {

    VCDSignalHash   hash  = $2;
    VCDTimedValue * toadd = new VCDTimedValue();
    
    toadd -> time   = current_time;
    toadd -> value = new VCDValue($1);
    driver.fh -> add_signal_value(toadd, hash);
}

%%


void VCDParser::parser::error (
    const location_type& l,
    const std::string& m) {
    driver.error(l,m);
}
